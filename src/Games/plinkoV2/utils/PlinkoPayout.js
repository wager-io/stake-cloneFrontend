 export const getPlinkoPayouts = (risk, rows) => {
    // Define payout tables for different risk levels and row counts
    // These should be adjusted to match the actual number of buckets (startingPegs + rows)
    const startingPegs = 3;
    const bucketCount = startingPegs + rows;
    
    // Payout tables for different risk levels and row counts
    const payoutTables = {
      1: { // low risk
        8: [1.6, 1.4, 1.2, 1.1, 1.0, 0.5, 0.5, 0.5, 0.5, 1.0, 1.1, 1.2, 1.4, 1.6],
        9: [2.0, 1.6, 1.4, 1.2, 1.0, 0.7, 0.5, 0.5, 0.7, 1.0, 1.2, 1.4, 1.6, 2.0],
        10: [3.0, 1.9, 1.4, 1.2, 1.1, 1.0, 0.5, 0.5, 0.5, 0.5, 1.0, 1.1, 1.2, 1.4, 1.9, 3.0],
        11: [5.0, 2.5, 1.8, 1.4, 1.2, 1.0, 0.7, 0.5, 0.5, 0.7, 1.0, 1.2, 1.4, 1.8, 2.5, 5.0],
        12: [8.0, 3.0, 2.0, 1.5, 1.3, 1.1, 1.0, 0.5, 0.5, 1.0, 1.1, 1.3, 1.5, 2.0, 3.0, 8.0],
        13: [10.0, 5.0, 3.0, 2.0, 1.5, 1.2, 1.0, 0.7, 0.5, 0.7, 1.0, 1.2, 1.5, 2.0, 3.0, 5.0, 10.0],
        14: [15.0, 8.0, 4.0, 2.5, 1.8, 1.4, 1.1, 1.0, 0.5, 0.5, 1.0, 1.1, 1.4, 1.8, 2.5, 4.0, 8.0, 15.0],
        15: [20.0, 10.0, 5.0, 3.0, 2.0, 1.5, 1.2, 1.0, 0.7, 0.5, 0.7, 1.0, 1.2, 1.5, 2.0, 3.0, 5.0, 10.0, 20.0],
        16: [40.0, 15.0, 8.0, 4.0, 2.5, 1.8, 1.4, 1.1, 1.0, 0.5, 0.5, 1.0, 1.1, 1.4, 1.8, 2.5, 4.0, 8.0, 15.0, 40.0]
      },
      2: { // medium risk
        8: [5.6, 3.0, 1.9, 1.4, 1.0, 0.5, 0.3, 0.3, 0.3, 0.3, 0.5, 1.0, 1.4, 1.9, 3.0, 5.6],
        9: [8.0, 4.0, 2.5, 1.6, 1.2, 0.7, 0.4, 0.3, 0.3, 0.4, 0.7, 1.2, 1.6, 2.5, 4.0, 8.0],
        10: [10.0, 5.0, 3.0, 2.0, 1.4, 1.0, 0.5, 0.3, 0.3, 0.3, 0.3, 0.5, 1.0, 1.4, 2.0, 3.0, 5.0, 10.0],
        11: [16.0, 8.0, 4.0, 2.5, 1.6, 1.2, 0.7, 0.4, 0.3, 0.3, 0.4, 0.7, 1.2, 1.6, 2.5, 4.0, 8.0, 16.0],
        12: [24.0, 12.0, 6.0, 3.0, 2.0, 1.4, 1.0, 0.5, 0.3, 0.3, 0.3, 0.3, 0.5, 1.0, 1.4, 2.0, 3.0, 6.0, 12.0, 24.0],
        13: [33.0, 16.0, 8.0, 4.0, 2.5, 1.6, 1.2, 0.7, 0.4, 0.3, 0.3, 0.4, 0.7, 1.2, 1.6, 2.5, 4.0, 8.0, 16.0, 33.0],
        14: [50.0, 24.0, 12.0, 6.0, 3.0, 2.0, 1.4, 1.0, 0.5, 0.3, 0.3, 0.3, 0.3, 0.5, 1.0, 1.4, 2.0, 3.0, 6.0, 12.0, 24.0, 50.0],
        15: [75.0, 33.0, 16.0, 8.0, 4.0, 2.5, 1.6, 1.2, 0.7, 0.4, 0.3, 0.3, 0.4, 0.7, 1.2, 1.6, 2.5, 4.0, 8.0, 16.0, 33.0, 75.0],
        16: [110.0, 50.0, 24.0, 12.0, 6.0, 3.0, 2.0, 1.4, 1.0, 0.5, 0.3, 0.3, 0.3, 0.3, 0.5, 1.0, 1.4, 2.0, 3.0, 6.0, 12.0, 24.0, 50.0, 110.0]
      },
      3: { // high risk
        8: [13.0, 8.0, 3.0, 1.5, 0.7, 0.3, 0.2, 0.2, 0.2, 0.2, 0.3, 0.7, 1.5, 3.0, 8.0, 13.0],
        9: [22.0, 10.0, 5.0, 2.0, 1.0, 0.5, 0.3, 0.2, 0.2, 0.3, 0.5, 1.0, 2.0, 5.0, 10.0, 22.0],
        10: [29.0, 14.0, 7.0, 3.0, 1.5, 0.7, 0.4, 0.2, 0.2, 0.2, 0.2, 0.4, 0.7, 1.5, 3.0, 7.0, 14.0, 29.0],
        11: [42.0, 20.0, 10.0, 5.0, 2.0, 1.0, 0.5, 0.3, 0.2, 0.2, 0.3, 0.5, 1.0, 2.0, 5.0, 10.0, 20.0, 42.0],
        12: [88.0, 29.0, 14.0, 7.0, 3.0, 1.5, 0.7, 0.4, 0.2, 0.2, 0.2, 0.2, 0.4, 0.7, 1.5, 3.0, 7.0, 14.0, 29.0, 88.0],
        13: [140.0, 42.0, 20.0, 10.0, 5.0, 2.0, 1.0, 0.5, 0.3, 0.2, 0.2, 0.3, 0.5, 1.0, 2.0, 5.0, 10.0, 20.0, 42.0, 140.0],
        14: [200.0, 88.0, 29.0, 14.0, 7.0, 3.0, 1.5, 0.7, 0.4, 0.2, 0.2, 0.2, 0.2, 0.4, 0.7, 1.5, 3.0, 7.0, 14.0, 29.0, 88.0, 200.0],
        15: [300.0, 140.0, 42.0, 20.0, 10.0, 5.0, 2.0, 1.0, 0.5, 0.3, 0.2, 0.2, 0.3, 0.5, 1.0, 2.0, 5.0, 10.0, 20.0, 42.0, 140.0, 300.0],
        16: [420.0, 200.0, 88.0, 29.0, 14.0, 7.0, 3.0, 1.5, 0.7, 0.4, 0.2, 0.2, 0.2, 0.2, 0.4, 0.7, 1.5, 3.0, 7.0, 14.0, 29.0, 88.0, 200.0, 420.0]
      }
    };
    
    // If we don't have a specific payout table for this combination, generate one
    if (!payoutTables[risk]?.[rows]) {
      // Generate a default payout table based on risk level
      const defaultPayouts = [];
      for (let i = 0; i < bucketCount; i++) {
        // Calculate position relative to center (0 = center, 1 = edge)
        const position = Math.abs((i / (bucketCount - 1)) * 2 - 1);
        
        // Higher risk means higher payouts at the edges
        let multiplier;
        if (risk === 1) { // Low risk
          multiplier = 1 + position * 2; // 1x to 3x
        } else if (risk === 2) { // Medium risk
          multiplier = 0.5 + position * 8; // 0.5x to 8.5x
        } else { // High risk
          multiplier = 0.2 + position * 20; // 0.2x to 20.2x
        }
        
        defaultPayouts.push(parseFloat(multiplier.toFixed(2)));
      }
      
      return defaultPayouts;
    }
    
    return payoutTables[risk][rows];
  };

